#BlueJ class context
comment0.params=i\ j\ starveTime
comment0.target=RunLengthEncoding(int,\ int,\ int)
comment0.text=\r\n\ \ RunLengthEncoding()\ (with\ three\ parameters)\ is\ a\ constructor\ that\ creates\r\n\ \ a\ run-length\ encoding\ of\ an\ empty\ ocean\ having\ width\ i\ and\ height\ j,\r\n\ \ in\ which\ sharks\ starve\ after\ starveTime\ timesteps.\r\n\ \ @param\ i\ is\ the\ width\ of\ the\ ocean.\r\n\ \ @param\ j\ is\ the\ height\ of\ the\ ocean.\r\n\ \ @param\ starveTime\ is\ the\ number\ of\ timesteps\ sharks\ survive\ without\ food.\r\n
comment1.params=i\ j\ starveTime\ runTypes\ runLengths
comment1.target=RunLengthEncoding(int,\ int,\ int,\ int[],\ int[])
comment1.text=\r\n\ \ RunLengthEncoding()\ (with\ five\ parameters)\ is\ a\ constructor\ that\ creates\r\n\ \ a\ run-length\ encoding\ of\ an\ ocean\ having\ width\ i\ and\ height\ j,\ in\ which\r\n\ \ sharks\ starve\ after\ starveTime\ timesteps.\ \ The\ runs\ of\ the\ run-length\r\n\ \ encoding\ are\ taken\ from\ two\ input\ arrays.\ \ Run\ i\ has\ length\ runLengths[i]\r\n\ \ and\ species\ runTypes[i].\r\n\ \ @param\ i\ is\ the\ width\ of\ the\ ocean.\r\n\ \ @param\ j\ is\ the\ height\ of\ the\ ocean.\r\n\ \ @param\ starveTime\ is\ the\ number\ of\ timesteps\ sharks\ survive\ without\ food.\r\n\ \ @param\ runTypes\ is\ an\ array\ that\ represents\ the\ species\ represented\ by\r\n\ \ \ \ \ \ \ \ \ each\ run.\ \ Each\ element\ of\ runTypes\ is\ Ocean.EMPTY,\ Ocean.FISH,\r\n\ \ \ \ \ \ \ \ \ or\ Ocean.SHARK.\ \ Any\ run\ of\ sharks\ is\ treated\ as\ a\ run\ of\ newborn\r\n\ \ \ \ \ \ \ \ \ sharks\ (which\ are\ equivalent\ to\ sharks\ that\ have\ just\ eaten).\r\n\ \ @param\ runLengths\ is\ an\ array\ that\ represents\ the\ length\ of\ each\ run.\r\n\ \ \ \ \ \ \ \ \ The\ sum\ of\ all\ elements\ of\ the\ runLengths\ array\ should\ be\ i\ *\ j.\r\n
comment10.params=x\ y
comment10.target=void\ addFish(int,\ int)
comment10.text=\r\n\ \ addFish()\ places\ a\ fish\ in\ cell\ (x,\ y)\ if\ the\ cell\ is\ empty.\ \ If\ the\r\n\ \ cell\ is\ already\ occupied,\ leave\ the\ cell\ as\ it\ is.\ \ The\ final\ run-length\r\n\ \ encoding\ should\ be\ compressed\ as\ much\ as\ possible;\ there\ should\ not\ be\r\n\ \ two\ consecutive\ runs\ of\ sharks\ with\ the\ same\ degree\ of\ hunger.\r\n\ \ @param\ x\ is\ the\ x-coordinate\ of\ the\ cell\ to\ place\ a\ fish\ in.\r\n\ \ @param\ y\ is\ the\ y-coordinate\ of\ the\ cell\ to\ place\ a\ fish\ in.\r\n
comment11.params=x\ y
comment11.target=int\ coordinatesToInt(int,\ int)
comment12.params=x
comment12.target=int\ xConvert(int)
comment13.params=y
comment13.target=int\ yConvert(int)
comment14.params=x\ y
comment14.target=void\ addShark(int,\ int)
comment14.text=\r\n\ \ addShark()\ (with\ two\ parameters)\ places\ a\ newborn\ shark\ in\ cell\ (x,\ y)\ if\r\n\ \ the\ cell\ is\ empty.\ \ A\ "newborn"\ shark\ is\ equivalent\ to\ a\ shark\ that\ has\r\n\ \ just\ eaten.\ \ If\ the\ cell\ is\ already\ occupied,\ leave\ the\ cell\ as\ it\ is.\r\n\ \ The\ final\ run-length\ encoding\ should\ be\ compressed\ as\ much\ as\ possible;\r\n\ \ there\ should\ not\ be\ two\ consecutive\ runs\ of\ sharks\ with\ the\ same\ degree\r\n\ \ of\ hunger.\r\n\ \ @param\ x\ is\ the\ x-coordinate\ of\ the\ cell\ to\ place\ a\ shark\ in.\r\n\ \ @param\ y\ is\ the\ y-coordinate\ of\ the\ cell\ to\ place\ a\ shark\ in.\r\n
comment15.params=
comment15.target=void\ check()
comment15.text=\r\n\ \ check()\ walks\ through\ the\ run-length\ encoding\ and\ prints\ an\ error\ message\r\n\ \ if\ two\ consecutive\ runs\ have\ the\ same\ contents,\ or\ if\ the\ sum\ of\ all\ run\r\n\ \ lengths\ does\ not\ equal\ the\ number\ of\ cells\ in\ the\ ocean.\r\n
comment2.params=
comment2.target=void\ restartRuns()
comment2.text=\r\n\ \ restartRuns()\ resets\ the\ enumeration\ as\ described\ above,\ so\ that\r\n\ \ nextRun()\ will\ enumerate\ all\ the\ runs\ from\ the\ beginning.\r\n
comment3.params=
comment3.target=int[]\ nextRun()
comment3.text=\r\n\ \ nextRun()\ returns\ the\ next\ run\ in\ the\ enumeration,\ as\ described\ above.\r\n\ \ If\ the\ runs\ have\ been\ exhausted,\ it\ returns\ null.\ \ The\ return\ value\ is\r\n\ \ an\ array\ of\ two\ ints\ (constructed\ here),\ representing\ the\ type\ and\ the\r\n\ \ size\ of\ the\ run,\ in\ that\ order.\r\n\ \ @return\ the\ next\ run\ in\ the\ enumeration,\ represented\ by\ an\ array\ of\r\n\ \ \ \ \ \ \ \ \ \ two\ ints.\ \ The\ int\ at\ index\ zero\ indicates\ the\ run\ type\r\n\ \ \ \ \ \ \ \ \ \ (Ocean.EMPTY,\ Ocean.SHARK,\ or\ Ocean.FISH).\ \ The\ int\ at\ index\ one\r\n\ \ \ \ \ \ \ \ \ \ indicates\ the\ run\ length\ (which\ must\ be\ at\ least\ 1).\r\n
comment4.params=sea
comment4.target=int\ typeCheck(Ocean)
comment5.params=sea
comment5.target=int[]\ runTypes(Ocean)
comment6.params=sea
comment6.target=int[]\ runLengths(Ocean)
comment7.params=sea
comment7.target=int[]\ starveTimes(Ocean)
comment8.params=
comment8.target=Ocean\ toOcean()
comment8.text=\r\n\ \ toOcean()\ converts\ a\ run-length\ encoding\ of\ an\ ocean\ into\ an\ Ocean\r\n\ \ object.\ \ You\ will\ need\ to\ implement\ the\ three-parameter\ addShark\ method\r\n\ \ in\ the\ Ocean\ class\ for\ this\ method's\ use.\r\n\ \ @return\ the\ Ocean\ represented\ by\ a\ run-length\ encoding.\r\n
comment9.params=sea
comment9.target=RunLengthEncoding(Ocean)
comment9.text=\r\n\ \ RunLengthEncoding()\ (with\ one\ parameter)\ is\ a\ constructor\ that\ creates\r\n\ \ a\ run-length\ encoding\ of\ an\ input\ Ocean.\ \ You\ will\ need\ to\ implement\r\n\ \ the\ sharkFeeding\ method\ in\ the\ Ocean\ class\ for\ this\ constructor's\ use.\r\n\ \ @param\ sea\ is\ the\ ocean\ to\ encode.\r\n
numComments=16
